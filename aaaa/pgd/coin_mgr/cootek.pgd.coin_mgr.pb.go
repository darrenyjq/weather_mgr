// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.3
// source: bbbb.pgd.coin_mgr.proto

package coin_mgr

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	ysession "weather_mgr/bbbb/pgd/ysession"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetCoinInfoParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionBase *ysession.SessionParam `protobuf:"bytes,1,opt,name=sessionBase,proto3" json:"sessionBase,omitempty"`
}

func (x *GetCoinInfoParam) Reset() {
	*x = GetCoinInfoParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinInfoParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinInfoParam) ProtoMessage() {}

func (x *GetCoinInfoParam) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinInfoParam.ProtoReflect.Descriptor instead.
func (*GetCoinInfoParam) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{0}
}

func (x *GetCoinInfoParam) GetSessionBase() *ysession.SessionParam {
	if x != nil {
		return x.SessionBase
	}
	return nil
}

type GetCoinInfoByUidParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AppName     string `protobuf:"bytes,2,opt,name=appName,proto3" json:"appName,omitempty"`
	AccountName string `protobuf:"bytes,3,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	AccountType string `protobuf:"bytes,4,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
}

func (x *GetCoinInfoByUidParam) Reset() {
	*x = GetCoinInfoByUidParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinInfoByUidParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinInfoByUidParam) ProtoMessage() {}

func (x *GetCoinInfoByUidParam) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinInfoByUidParam.ProtoReflect.Descriptor instead.
func (*GetCoinInfoByUidParam) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{1}
}

func (x *GetCoinInfoByUidParam) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetCoinInfoByUidParam) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *GetCoinInfoByUidParam) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *GetCoinInfoByUidParam) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

type GetCoinAccountParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionBase *ysession.SessionParam `protobuf:"bytes,1,opt,name=sessionBase,proto3" json:"sessionBase,omitempty"`
}

func (x *GetCoinAccountParam) Reset() {
	*x = GetCoinAccountParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountParam) ProtoMessage() {}

func (x *GetCoinAccountParam) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountParam.ProtoReflect.Descriptor instead.
func (*GetCoinAccountParam) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{2}
}

func (x *GetCoinAccountParam) GetSessionBase() *ysession.SessionParam {
	if x != nil {
		return x.SessionBase
	}
	return nil
}

type GetCoinAccountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance               int64  `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	HasRewardedFirstLogin bool   `protobuf:"varint,2,opt,name=hasRewardedFirstLogin,proto3" json:"hasRewardedFirstLogin,omitempty"`
	CreateTime            string `protobuf:"bytes,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime            string `protobuf:"bytes,4,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *GetCoinAccountResult) Reset() {
	*x = GetCoinAccountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountResult) ProtoMessage() {}

func (x *GetCoinAccountResult) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountResult.ProtoReflect.Descriptor instead.
func (*GetCoinAccountResult) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{3}
}

func (x *GetCoinAccountResult) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GetCoinAccountResult) GetHasRewardedFirstLogin() bool {
	if x != nil {
		return x.HasRewardedFirstLogin
	}
	return false
}

func (x *GetCoinAccountResult) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *GetCoinAccountResult) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type GetCoinInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance               int64  `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	HasRewardedFirstLogin bool   `protobuf:"varint,2,opt,name=hasRewardedFirstLogin,proto3" json:"hasRewardedFirstLogin,omitempty"`
	CreateTime            string `protobuf:"bytes,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime            string `protobuf:"bytes,4,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *GetCoinInfoResult) Reset() {
	*x = GetCoinInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinInfoResult) ProtoMessage() {}

func (x *GetCoinInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinInfoResult.ProtoReflect.Descriptor instead.
func (*GetCoinInfoResult) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{4}
}

func (x *GetCoinInfoResult) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GetCoinInfoResult) GetHasRewardedFirstLogin() bool {
	if x != nil {
		return x.HasRewardedFirstLogin
	}
	return false
}

func (x *GetCoinInfoResult) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *GetCoinInfoResult) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type IncrCoinParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionBase *ysession.SessionParam `protobuf:"bytes,1,opt,name=sessionBase,proto3" json:"sessionBase,omitempty"`
	Label       string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	IncrNum     int64                  `protobuf:"varint,3,opt,name=incrNum,proto3" json:"incrNum,omitempty"`
	NotLog      bool                   `protobuf:"varint,4,opt,name=notLog,proto3" json:"notLog,omitempty"`
}

func (x *IncrCoinParam) Reset() {
	*x = IncrCoinParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrCoinParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrCoinParam) ProtoMessage() {}

func (x *IncrCoinParam) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrCoinParam.ProtoReflect.Descriptor instead.
func (*IncrCoinParam) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{5}
}

func (x *IncrCoinParam) GetSessionBase() *ysession.SessionParam {
	if x != nil {
		return x.SessionBase
	}
	return nil
}

func (x *IncrCoinParam) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *IncrCoinParam) GetIncrNum() int64 {
	if x != nil {
		return x.IncrNum
	}
	return 0
}

func (x *IncrCoinParam) GetNotLog() bool {
	if x != nil {
		return x.NotLog
	}
	return false
}

type IncrCoinByUidParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Label   string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	IncrNum int64  `protobuf:"varint,3,opt,name=incrNum,proto3" json:"incrNum,omitempty"`
	AppName string `protobuf:"bytes,4,opt,name=appName,proto3" json:"appName,omitempty"`
}

func (x *IncrCoinByUidParam) Reset() {
	*x = IncrCoinByUidParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrCoinByUidParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrCoinByUidParam) ProtoMessage() {}

func (x *IncrCoinByUidParam) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrCoinByUidParam.ProtoReflect.Descriptor instead.
func (*IncrCoinByUidParam) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{6}
}

func (x *IncrCoinByUidParam) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *IncrCoinByUidParam) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *IncrCoinByUidParam) GetIncrNum() int64 {
	if x != nil {
		return x.IncrNum
	}
	return 0
}

func (x *IncrCoinByUidParam) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type IncrCoinResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance int64 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *IncrCoinResult) Reset() {
	*x = IncrCoinResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrCoinResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrCoinResult) ProtoMessage() {}

func (x *IncrCoinResult) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrCoinResult.ProtoReflect.Descriptor instead.
func (*IncrCoinResult) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{7}
}

func (x *IncrCoinResult) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type GetCoinTotalStatsParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionBase *ysession.SessionParam `protobuf:"bytes,1,opt,name=sessionBase,proto3" json:"sessionBase,omitempty"`
}

func (x *GetCoinTotalStatsParam) Reset() {
	*x = GetCoinTotalStatsParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinTotalStatsParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinTotalStatsParam) ProtoMessage() {}

func (x *GetCoinTotalStatsParam) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinTotalStatsParam.ProtoReflect.Descriptor instead.
func (*GetCoinTotalStatsParam) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{8}
}

func (x *GetCoinTotalStatsParam) GetSessionBase() *ysession.SessionParam {
	if x != nil {
		return x.SessionBase
	}
	return nil
}

type GetCoinTotalStatsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAwardCoins int64 `protobuf:"varint,1,opt,name=totalAwardCoins,proto3" json:"totalAwardCoins,omitempty"`
}

func (x *GetCoinTotalStatsResult) Reset() {
	*x = GetCoinTotalStatsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinTotalStatsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinTotalStatsResult) ProtoMessage() {}

func (x *GetCoinTotalStatsResult) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinTotalStatsResult.ProtoReflect.Descriptor instead.
func (*GetCoinTotalStatsResult) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{9}
}

func (x *GetCoinTotalStatsResult) GetTotalAwardCoins() int64 {
	if x != nil {
		return x.TotalAwardCoins
	}
	return 0
}

type GetCoinTotalStatsByUidParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GetCoinTotalStatsByUidParam) Reset() {
	*x = GetCoinTotalStatsByUidParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinTotalStatsByUidParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinTotalStatsByUidParam) ProtoMessage() {}

func (x *GetCoinTotalStatsByUidParam) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinTotalStatsByUidParam.ProtoReflect.Descriptor instead.
func (*GetCoinTotalStatsByUidParam) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{10}
}

func (x *GetCoinTotalStatsByUidParam) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type GetCoinTotalStatsByUidResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAwardCoins int64 `protobuf:"varint,1,opt,name=totalAwardCoins,proto3" json:"totalAwardCoins,omitempty"`
}

func (x *GetCoinTotalStatsByUidResult) Reset() {
	*x = GetCoinTotalStatsByUidResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinTotalStatsByUidResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinTotalStatsByUidResult) ProtoMessage() {}

func (x *GetCoinTotalStatsByUidResult) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinTotalStatsByUidResult.ProtoReflect.Descriptor instead.
func (*GetCoinTotalStatsByUidResult) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{11}
}

func (x *GetCoinTotalStatsByUidResult) GetTotalAwardCoins() int64 {
	if x != nil {
		return x.TotalAwardCoins
	}
	return 0
}

type AwardCoinParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionBase *ysession.SessionParam `protobuf:"bytes,1,opt,name=sessionBase,proto3" json:"sessionBase,omitempty"`
	Label       string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Num         int64                  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *AwardCoinParam) Reset() {
	*x = AwardCoinParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwardCoinParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwardCoinParam) ProtoMessage() {}

func (x *AwardCoinParam) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwardCoinParam.ProtoReflect.Descriptor instead.
func (*AwardCoinParam) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{12}
}

func (x *AwardCoinParam) GetSessionBase() *ysession.SessionParam {
	if x != nil {
		return x.SessionBase
	}
	return nil
}

func (x *AwardCoinParam) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AwardCoinParam) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type AwardCoinResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg       string                         `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	ErrorCode int64                          `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Data      *AwardCoinResult_AwardCoinData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AwardCoinResult) Reset() {
	*x = AwardCoinResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwardCoinResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwardCoinResult) ProtoMessage() {}

func (x *AwardCoinResult) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwardCoinResult.ProtoReflect.Descriptor instead.
func (*AwardCoinResult) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{13}
}

func (x *AwardCoinResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AwardCoinResult) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *AwardCoinResult) GetData() *AwardCoinResult_AwardCoinData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AwardCoinResult_AwardCoinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance               int64  `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	DailyAwardedAmountMax int64  `protobuf:"varint,2,opt,name=dailyAwardedAmountMax,proto3" json:"dailyAwardedAmountMax,omitempty"`
	TodayAwardedTimes     int64  `protobuf:"varint,3,opt,name=todayAwardedTimes,proto3" json:"todayAwardedTimes,omitempty"`
	TodayAwardedAmount    int64  `protobuf:"varint,4,opt,name=todayAwardedAmount,proto3" json:"todayAwardedAmount,omitempty"`
	Label                 string `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	Today                 string `protobuf:"bytes,6,opt,name=today,proto3" json:"today,omitempty"`
}

func (x *AwardCoinResult_AwardCoinData) Reset() {
	*x = AwardCoinResult_AwardCoinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwardCoinResult_AwardCoinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwardCoinResult_AwardCoinData) ProtoMessage() {}

func (x *AwardCoinResult_AwardCoinData) ProtoReflect() protoreflect.Message {
	mi := &file_bbbb_pgd_coin_mgr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwardCoinResult_AwardCoinData.ProtoReflect.Descriptor instead.
func (*AwardCoinResult_AwardCoinData) Descriptor() ([]byte, []int) {
	return file_bbbb_pgd_coin_mgr_proto_rawDescGZIP(), []int{13, 0}
}

func (x *AwardCoinResult_AwardCoinData) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AwardCoinResult_AwardCoinData) GetDailyAwardedAmountMax() int64 {
	if x != nil {
		return x.DailyAwardedAmountMax
	}
	return 0
}

func (x *AwardCoinResult_AwardCoinData) GetTodayAwardedTimes() int64 {
	if x != nil {
		return x.TodayAwardedTimes
	}
	return 0
}

func (x *AwardCoinResult_AwardCoinData) GetTodayAwardedAmount() int64 {
	if x != nil {
		return x.TodayAwardedAmount
	}
	return 0
}

func (x *AwardCoinResult_AwardCoinData) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AwardCoinResult_AwardCoinData) GetToday() string {
	if x != nil {
		return x.Today
	}
	return ""
}

var File_bbbb_pgd_coin_mgr_proto protoreflect.FileDescriptor

var file_bbbb_pgd_coin_mgr_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x6d, 0x67, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x6f,
	0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67, 0x72,
	0x1a, 0x19, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x79, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x43, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67,
	0x64, 0x2e, 0x79, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x73, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x79, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x22, 0xa6, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x68, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x68, 0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x0d,
	0x49, 0x6e, 0x63, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x43, 0x0a,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e,
	0x79, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x72,
	0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x22, 0x70, 0x0a, 0x12, 0x49, 0x6e,
	0x63, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x72,
	0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x0e,
	0x49, 0x6e, 0x63, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b,
	0x2e, 0x70, 0x67, 0x64, 0x2e, 0x79, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x22, 0x43, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x2f, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x42, 0x79, 0x55, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x48, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x42, 0x79, 0x55, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x7d, 0x0a, 0x0e, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x79, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0xf6, 0x02, 0x0a, 0x0f, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6f, 0x74,
	0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67, 0x72, 0x2e,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0xe9, 0x01, 0x0a, 0x0d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x64,
	0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x32,
	0xc1, 0x06, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x67, 0x72, 0x12, 0x5e, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6f,
	0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12,
	0x2a, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x6d, 0x67, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x55, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x26, 0x2e, 0x63, 0x6f,
	0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x08, 0x49, 0x6e, 0x63, 0x72, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67, 0x72, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x43, 0x6f, 0x69, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70,
	0x67, 0x64, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67, 0x72, 0x2e, 0x49, 0x6e, 0x63, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0d,
	0x49, 0x6e, 0x63, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x27, 0x2e,
	0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x6d, 0x67, 0x72, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x79, 0x55, 0x69,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e,
	0x70, 0x67, 0x64, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67, 0x72, 0x2e, 0x49, 0x6e, 0x63,
	0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x70, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a,
	0x2c, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x6d, 0x67, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x29, 0x2e, 0x63, 0x6f,
	0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x55,
	0x69, 0x64, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x55, 0x69, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67,
	0x64, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x55, 0x69,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x09, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e,
	0x70, 0x67, 0x64, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67, 0x72, 0x2e, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x24, 0x2e, 0x63, 0x6f,
	0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6d, 0x67,
	0x72, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x42, 0x1f, 0x5a, 0x1d, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x6b,
	0x2f, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2f, 0x70, 0x67, 0x64, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x6d, 0x67, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bbbb_pgd_coin_mgr_proto_rawDescOnce sync.Once
	file_bbbb_pgd_coin_mgr_proto_rawDescData = file_bbbb_pgd_coin_mgr_proto_rawDesc
)

func file_bbbb_pgd_coin_mgr_proto_rawDescGZIP() []byte {
	file_bbbb_pgd_coin_mgr_proto_rawDescOnce.Do(func() {
		file_bbbb_pgd_coin_mgr_proto_rawDescData = protoimpl.X.CompressGZIP(file_bbbb_pgd_coin_mgr_proto_rawDescData)
	})
	return file_bbbb_pgd_coin_mgr_proto_rawDescData
}

var file_bbbb_pgd_coin_mgr_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_bbbb_pgd_coin_mgr_proto_goTypes = []interface{}{
	(*GetCoinInfoParam)(nil),              // 0: bbbb.pgd.coin_mgr.GetCoinInfoParam
	(*GetCoinInfoByUidParam)(nil),         // 1: bbbb.pgd.coin_mgr.GetCoinInfoByUidParam
	(*GetCoinAccountParam)(nil),           // 2: bbbb.pgd.coin_mgr.GetCoinAccountParam
	(*GetCoinAccountResult)(nil),          // 3: bbbb.pgd.coin_mgr.GetCoinAccountResult
	(*GetCoinInfoResult)(nil),             // 4: bbbb.pgd.coin_mgr.GetCoinInfoResult
	(*IncrCoinParam)(nil),                 // 5: bbbb.pgd.coin_mgr.IncrCoinParam
	(*IncrCoinByUidParam)(nil),            // 6: bbbb.pgd.coin_mgr.IncrCoinByUidParam
	(*IncrCoinResult)(nil),                // 7: bbbb.pgd.coin_mgr.IncrCoinResult
	(*GetCoinTotalStatsParam)(nil),        // 8: bbbb.pgd.coin_mgr.GetCoinTotalStatsParam
	(*GetCoinTotalStatsResult)(nil),       // 9: bbbb.pgd.coin_mgr.GetCoinTotalStatsResult
	(*GetCoinTotalStatsByUidParam)(nil),   // 10: bbbb.pgd.coin_mgr.GetCoinTotalStatsByUidParam
	(*GetCoinTotalStatsByUidResult)(nil),  // 11: bbbb.pgd.coin_mgr.GetCoinTotalStatsByUidResult
	(*AwardCoinParam)(nil),                // 12: bbbb.pgd.coin_mgr.AwardCoinParam
	(*AwardCoinResult)(nil),               // 13: bbbb.pgd.coin_mgr.AwardCoinResult
	(*AwardCoinResult_AwardCoinData)(nil), // 14: bbbb.pgd.coin_mgr.AwardCoinResult.AwardCoinData
	(*ysession.SessionParam)(nil),         // 15: bbbb.pgd.ysession.SessionParam
}
var file_bbbb_pgd_coin_mgr_proto_depIdxs = []int32{
	15, // 0: bbbb.pgd.coin_mgr.GetCoinInfoParam.sessionBase:type_name -> bbbb.pgd.ysession.SessionParam
	15, // 1: bbbb.pgd.coin_mgr.GetCoinAccountParam.sessionBase:type_name -> bbbb.pgd.ysession.SessionParam
	15, // 2: bbbb.pgd.coin_mgr.IncrCoinParam.sessionBase:type_name -> bbbb.pgd.ysession.SessionParam
	15, // 3: bbbb.pgd.coin_mgr.GetCoinTotalStatsParam.sessionBase:type_name -> bbbb.pgd.ysession.SessionParam
	15, // 4: bbbb.pgd.coin_mgr.AwardCoinParam.sessionBase:type_name -> bbbb.pgd.ysession.SessionParam
	14, // 5: bbbb.pgd.coin_mgr.AwardCoinResult.data:type_name -> bbbb.pgd.coin_mgr.AwardCoinResult.AwardCoinData
	0,  // 6: bbbb.pgd.coin_mgr.CoinMgr.GetCoinInfo:input_type -> bbbb.pgd.coin_mgr.GetCoinInfoParam
	1,  // 7: bbbb.pgd.coin_mgr.CoinMgr.GetCoinInfoByUid:input_type -> bbbb.pgd.coin_mgr.GetCoinInfoByUidParam
	5,  // 8: bbbb.pgd.coin_mgr.CoinMgr.IncrCoin:input_type -> bbbb.pgd.coin_mgr.IncrCoinParam
	6,  // 9: bbbb.pgd.coin_mgr.CoinMgr.IncrCoinByUid:input_type -> bbbb.pgd.coin_mgr.IncrCoinByUidParam
	8,  // 10: bbbb.pgd.coin_mgr.CoinMgr.GetCoinTotalStats:input_type -> bbbb.pgd.coin_mgr.GetCoinTotalStatsParam
	2,  // 11: bbbb.pgd.coin_mgr.CoinMgr.GetCoinAccount:input_type -> bbbb.pgd.coin_mgr.GetCoinAccountParam
	10, // 12: bbbb.pgd.coin_mgr.CoinMgr.GetCoinTotalStatsByUid:input_type -> bbbb.pgd.coin_mgr.GetCoinTotalStatsByUidParam
	12, // 13: bbbb.pgd.coin_mgr.CoinMgr.AwardCoin:input_type -> bbbb.pgd.coin_mgr.AwardCoinParam
	4,  // 14: bbbb.pgd.coin_mgr.CoinMgr.GetCoinInfo:output_type -> bbbb.pgd.coin_mgr.GetCoinInfoResult
	4,  // 15: bbbb.pgd.coin_mgr.CoinMgr.GetCoinInfoByUid:output_type -> bbbb.pgd.coin_mgr.GetCoinInfoResult
	7,  // 16: bbbb.pgd.coin_mgr.CoinMgr.IncrCoin:output_type -> bbbb.pgd.coin_mgr.IncrCoinResult
	7,  // 17: bbbb.pgd.coin_mgr.CoinMgr.IncrCoinByUid:output_type -> bbbb.pgd.coin_mgr.IncrCoinResult
	9,  // 18: bbbb.pgd.coin_mgr.CoinMgr.GetCoinTotalStats:output_type -> bbbb.pgd.coin_mgr.GetCoinTotalStatsResult
	3,  // 19: bbbb.pgd.coin_mgr.CoinMgr.GetCoinAccount:output_type -> bbbb.pgd.coin_mgr.GetCoinAccountResult
	11, // 20: bbbb.pgd.coin_mgr.CoinMgr.GetCoinTotalStatsByUid:output_type -> bbbb.pgd.coin_mgr.GetCoinTotalStatsByUidResult
	13, // 21: bbbb.pgd.coin_mgr.CoinMgr.AwardCoin:output_type -> bbbb.pgd.coin_mgr.AwardCoinResult
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_bbbb_pgd_coin_mgr_proto_init() }
func file_bbbb_pgd_coin_mgr_proto_init() {
	if File_bbbb_pgd_coin_mgr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bbbb_pgd_coin_mgr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinInfoParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bbbb_pgd_coin_mgr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinInfoByUidParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bbbb_pgd_coin_mgr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bbbb_pgd_coin_mgr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bbbb_pgd_coin_mgr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bbbb_pgd_coin_mgr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrCoinParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bbbb_pgd_coin_mgr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrCoinByUidParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bbbb_pgd_coin_mgr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrCoinResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bbbb_pgd_coin_mgr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinTotalStatsParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bbbb_pgd_coin_mgr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinTotalStatsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bbbb_pgd_coin_mgr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinTotalStatsByUidParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bbbb_pgd_coin_mgr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinTotalStatsByUidResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bbbb_pgd_coin_mgr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwardCoinParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bbbb_pgd_coin_mgr_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwardCoinResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bbbb_pgd_coin_mgr_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwardCoinResult_AwardCoinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bbbb_pgd_coin_mgr_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bbbb_pgd_coin_mgr_proto_goTypes,
		DependencyIndexes: file_bbbb_pgd_coin_mgr_proto_depIdxs,
		MessageInfos:      file_bbbb_pgd_coin_mgr_proto_msgTypes,
	}.Build()
	File_bbbb_pgd_coin_mgr_proto = out.File
	file_bbbb_pgd_coin_mgr_proto_rawDesc = nil
	file_bbbb_pgd_coin_mgr_proto_goTypes = nil
	file_bbbb_pgd_coin_mgr_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CoinMgrClient is the client API for CoinMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoinMgrClient interface {
	GetCoinInfo(ctx context.Context, in *GetCoinInfoParam, opts ...grpc.CallOption) (*GetCoinInfoResult, error)
	GetCoinInfoByUid(ctx context.Context, in *GetCoinInfoByUidParam, opts ...grpc.CallOption) (*GetCoinInfoResult, error)
	IncrCoin(ctx context.Context, in *IncrCoinParam, opts ...grpc.CallOption) (*IncrCoinResult, error)
	IncrCoinByUid(ctx context.Context, in *IncrCoinByUidParam, opts ...grpc.CallOption) (*IncrCoinResult, error)
	GetCoinTotalStats(ctx context.Context, in *GetCoinTotalStatsParam, opts ...grpc.CallOption) (*GetCoinTotalStatsResult, error)
	GetCoinAccount(ctx context.Context, in *GetCoinAccountParam, opts ...grpc.CallOption) (*GetCoinAccountResult, error)
	GetCoinTotalStatsByUid(ctx context.Context, in *GetCoinTotalStatsByUidParam, opts ...grpc.CallOption) (*GetCoinTotalStatsByUidResult, error)
	AwardCoin(ctx context.Context, in *AwardCoinParam, opts ...grpc.CallOption) (*AwardCoinResult, error)
}

type coinMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinMgrClient(cc grpc.ClientConnInterface) CoinMgrClient {
	return &coinMgrClient{cc}
}

func (c *coinMgrClient) GetCoinInfo(ctx context.Context, in *GetCoinInfoParam, opts ...grpc.CallOption) (*GetCoinInfoResult, error) {
	out := new(GetCoinInfoResult)
	err := c.cc.Invoke(ctx, "/bbbb.pgd.coin_mgr.CoinMgr/GetCoinInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinMgrClient) GetCoinInfoByUid(ctx context.Context, in *GetCoinInfoByUidParam, opts ...grpc.CallOption) (*GetCoinInfoResult, error) {
	out := new(GetCoinInfoResult)
	err := c.cc.Invoke(ctx, "/bbbb.pgd.coin_mgr.CoinMgr/GetCoinInfoByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinMgrClient) IncrCoin(ctx context.Context, in *IncrCoinParam, opts ...grpc.CallOption) (*IncrCoinResult, error) {
	out := new(IncrCoinResult)
	err := c.cc.Invoke(ctx, "/bbbb.pgd.coin_mgr.CoinMgr/IncrCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinMgrClient) IncrCoinByUid(ctx context.Context, in *IncrCoinByUidParam, opts ...grpc.CallOption) (*IncrCoinResult, error) {
	out := new(IncrCoinResult)
	err := c.cc.Invoke(ctx, "/bbbb.pgd.coin_mgr.CoinMgr/IncrCoinByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinMgrClient) GetCoinTotalStats(ctx context.Context, in *GetCoinTotalStatsParam, opts ...grpc.CallOption) (*GetCoinTotalStatsResult, error) {
	out := new(GetCoinTotalStatsResult)
	err := c.cc.Invoke(ctx, "/bbbb.pgd.coin_mgr.CoinMgr/GetCoinTotalStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinMgrClient) GetCoinAccount(ctx context.Context, in *GetCoinAccountParam, opts ...grpc.CallOption) (*GetCoinAccountResult, error) {
	out := new(GetCoinAccountResult)
	err := c.cc.Invoke(ctx, "/bbbb.pgd.coin_mgr.CoinMgr/GetCoinAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinMgrClient) GetCoinTotalStatsByUid(ctx context.Context, in *GetCoinTotalStatsByUidParam, opts ...grpc.CallOption) (*GetCoinTotalStatsByUidResult, error) {
	out := new(GetCoinTotalStatsByUidResult)
	err := c.cc.Invoke(ctx, "/bbbb.pgd.coin_mgr.CoinMgr/GetCoinTotalStatsByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinMgrClient) AwardCoin(ctx context.Context, in *AwardCoinParam, opts ...grpc.CallOption) (*AwardCoinResult, error) {
	out := new(AwardCoinResult)
	err := c.cc.Invoke(ctx, "/bbbb.pgd.coin_mgr.CoinMgr/AwardCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinMgrServer is the server API for CoinMgr service.
type CoinMgrServer interface {
	GetCoinInfo(context.Context, *GetCoinInfoParam) (*GetCoinInfoResult, error)
	GetCoinInfoByUid(context.Context, *GetCoinInfoByUidParam) (*GetCoinInfoResult, error)
	IncrCoin(context.Context, *IncrCoinParam) (*IncrCoinResult, error)
	IncrCoinByUid(context.Context, *IncrCoinByUidParam) (*IncrCoinResult, error)
	GetCoinTotalStats(context.Context, *GetCoinTotalStatsParam) (*GetCoinTotalStatsResult, error)
	GetCoinAccount(context.Context, *GetCoinAccountParam) (*GetCoinAccountResult, error)
	GetCoinTotalStatsByUid(context.Context, *GetCoinTotalStatsByUidParam) (*GetCoinTotalStatsByUidResult, error)
	AwardCoin(context.Context, *AwardCoinParam) (*AwardCoinResult, error)
}

// UnimplementedCoinMgrServer can be embedded to have forward compatible implementations.
type UnimplementedCoinMgrServer struct {
}

func (*UnimplementedCoinMgrServer) GetCoinInfo(context.Context, *GetCoinInfoParam) (*GetCoinInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinInfo not implemented")
}
func (*UnimplementedCoinMgrServer) GetCoinInfoByUid(context.Context, *GetCoinInfoByUidParam) (*GetCoinInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinInfoByUid not implemented")
}
func (*UnimplementedCoinMgrServer) IncrCoin(context.Context, *IncrCoinParam) (*IncrCoinResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrCoin not implemented")
}
func (*UnimplementedCoinMgrServer) IncrCoinByUid(context.Context, *IncrCoinByUidParam) (*IncrCoinResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrCoinByUid not implemented")
}
func (*UnimplementedCoinMgrServer) GetCoinTotalStats(context.Context, *GetCoinTotalStatsParam) (*GetCoinTotalStatsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinTotalStats not implemented")
}
func (*UnimplementedCoinMgrServer) GetCoinAccount(context.Context, *GetCoinAccountParam) (*GetCoinAccountResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccount not implemented")
}
func (*UnimplementedCoinMgrServer) GetCoinTotalStatsByUid(context.Context, *GetCoinTotalStatsByUidParam) (*GetCoinTotalStatsByUidResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinTotalStatsByUid not implemented")
}
func (*UnimplementedCoinMgrServer) AwardCoin(context.Context, *AwardCoinParam) (*AwardCoinResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AwardCoin not implemented")
}

func RegisterCoinMgrServer(s *grpc.Server, srv CoinMgrServer) {
	s.RegisterService(&_CoinMgr_serviceDesc, srv)
}

func _CoinMgr_GetCoinInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinInfoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinMgrServer).GetCoinInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbbb.pgd.coin_mgr.CoinMgr/GetCoinInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinMgrServer).GetCoinInfo(ctx, req.(*GetCoinInfoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinMgr_GetCoinInfoByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinInfoByUidParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinMgrServer).GetCoinInfoByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbbb.pgd.coin_mgr.CoinMgr/GetCoinInfoByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinMgrServer).GetCoinInfoByUid(ctx, req.(*GetCoinInfoByUidParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinMgr_IncrCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrCoinParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinMgrServer).IncrCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbbb.pgd.coin_mgr.CoinMgr/IncrCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinMgrServer).IncrCoin(ctx, req.(*IncrCoinParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinMgr_IncrCoinByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrCoinByUidParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinMgrServer).IncrCoinByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbbb.pgd.coin_mgr.CoinMgr/IncrCoinByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinMgrServer).IncrCoinByUid(ctx, req.(*IncrCoinByUidParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinMgr_GetCoinTotalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinTotalStatsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinMgrServer).GetCoinTotalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbbb.pgd.coin_mgr.CoinMgr/GetCoinTotalStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinMgrServer).GetCoinTotalStats(ctx, req.(*GetCoinTotalStatsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinMgr_GetCoinAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinMgrServer).GetCoinAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbbb.pgd.coin_mgr.CoinMgr/GetCoinAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinMgrServer).GetCoinAccount(ctx, req.(*GetCoinAccountParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinMgr_GetCoinTotalStatsByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinTotalStatsByUidParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinMgrServer).GetCoinTotalStatsByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbbb.pgd.coin_mgr.CoinMgr/GetCoinTotalStatsByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinMgrServer).GetCoinTotalStatsByUid(ctx, req.(*GetCoinTotalStatsByUidParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinMgr_AwardCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwardCoinParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinMgrServer).AwardCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbbb.pgd.coin_mgr.CoinMgr/AwardCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinMgrServer).AwardCoin(ctx, req.(*AwardCoinParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoinMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bbbb.pgd.coin_mgr.CoinMgr",
	HandlerType: (*CoinMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoinInfo",
			Handler:    _CoinMgr_GetCoinInfo_Handler,
		},
		{
			MethodName: "GetCoinInfoByUid",
			Handler:    _CoinMgr_GetCoinInfoByUid_Handler,
		},
		{
			MethodName: "IncrCoin",
			Handler:    _CoinMgr_IncrCoin_Handler,
		},
		{
			MethodName: "IncrCoinByUid",
			Handler:    _CoinMgr_IncrCoinByUid_Handler,
		},
		{
			MethodName: "GetCoinTotalStats",
			Handler:    _CoinMgr_GetCoinTotalStats_Handler,
		},
		{
			MethodName: "GetCoinAccount",
			Handler:    _CoinMgr_GetCoinAccount_Handler,
		},
		{
			MethodName: "GetCoinTotalStatsByUid",
			Handler:    _CoinMgr_GetCoinTotalStatsByUid_Handler,
		},
		{
			MethodName: "AwardCoin",
			Handler:    _CoinMgr_AwardCoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bbbb.pgd.coin_mgr.proto",
}
