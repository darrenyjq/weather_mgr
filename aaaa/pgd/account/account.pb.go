// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: account.proto

package account

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AccountType int32

const (
	AccountType_TEMP             AccountType = 0
	AccountType_PHONE            AccountType = 1
	AccountType_OAUTH2_GOOGLE    AccountType = 2
	AccountType_OAUTH_TWITTER    AccountType = 3
	AccountType_OAUTH2_FACEBOOK  AccountType = 4
	AccountType_OAUTH2_SINAWEIBO AccountType = 5
	AccountType_OAUTH2_QQ        AccountType = 6
	AccountType_VOIP_TEMP        AccountType = 7
	AccountType_MAIL             AccountType = 8
	AccountType_OAUTH2_XIAOMI    AccountType = 9
	AccountType_ANDES            AccountType = 10
	AccountType_OEM_AUTH         AccountType = 11
	AccountType_MARKET           AccountType = 12
	AccountType_ALERT            AccountType = 13
	AccountType_PHONE_OEM_OPEN   AccountType = 14
	AccountType_PHONE_GOOGLE     AccountType = 15
	AccountType_PHONE_FACEBOOK   AccountType = 16
	AccountType_PHONE_TWITTER    AccountType = 17
	AccountType_PALLAS           AccountType = 18
	AccountType_PHONE_WEIXIN     AccountType = 19
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0:  "TEMP",
		1:  "PHONE",
		2:  "OAUTH2_GOOGLE",
		3:  "OAUTH_TWITTER",
		4:  "OAUTH2_FACEBOOK",
		5:  "OAUTH2_SINAWEIBO",
		6:  "OAUTH2_QQ",
		7:  "VOIP_TEMP",
		8:  "MAIL",
		9:  "OAUTH2_XIAOMI",
		10: "ANDES",
		11: "OEM_AUTH",
		12: "MARKET",
		13: "ALERT",
		14: "PHONE_OEM_OPEN",
		15: "PHONE_GOOGLE",
		16: "PHONE_FACEBOOK",
		17: "PHONE_TWITTER",
		18: "PALLAS",
		19: "PHONE_WEIXIN",
	}
	AccountType_value = map[string]int32{
		"TEMP":             0,
		"PHONE":            1,
		"OAUTH2_GOOGLE":    2,
		"OAUTH_TWITTER":    3,
		"OAUTH2_FACEBOOK":  4,
		"OAUTH2_SINAWEIBO": 5,
		"OAUTH2_QQ":        6,
		"VOIP_TEMP":        7,
		"MAIL":             8,
		"OAUTH2_XIAOMI":    9,
		"ANDES":            10,
		"OEM_AUTH":         11,
		"MARKET":           12,
		"ALERT":            13,
		"PHONE_OEM_OPEN":   14,
		"PHONE_GOOGLE":     15,
		"PHONE_FACEBOOK":   16,
		"PHONE_TWITTER":    17,
		"PALLAS":           18,
		"PHONE_WEIXIN":     19,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[0].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[0]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AccountType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AccountType(num)
	return nil
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{0}
}

type MediaSource int32

const (
	MediaSource_MEDIA_SOURCE_DEFAULT              MediaSource = 0
	MediaSource_MEDIA_SOURCE_FACEBOOK             MediaSource = 1
	MediaSource_MEDIA_SOURCE_ADWORDS              MediaSource = 2
	MediaSource_MEDIA_SOURCE_WANGMENG             MediaSource = 3
	MediaSource_MEDIA_SOURCE_GOOGLE_PLAY          MediaSource = 4
	MediaSource_MEDIA_SOURCE_DAILIANG             MediaSource = 5
	MediaSource_MEDIA_SOURCE_OTHERS               MediaSource = 6
	MediaSource_MEDIA_SOURCE_OEM                  MediaSource = 7
	MediaSource_MEDIA_SOURCE_POSSIBLE_GOOGLE_PLAY MediaSource = 8
	MediaSource_MEDIA_SOURCE_NOAH_PUSH            MediaSource = 9
)

// Enum value maps for MediaSource.
var (
	MediaSource_name = map[int32]string{
		0: "MEDIA_SOURCE_DEFAULT",
		1: "MEDIA_SOURCE_FACEBOOK",
		2: "MEDIA_SOURCE_ADWORDS",
		3: "MEDIA_SOURCE_WANGMENG",
		4: "MEDIA_SOURCE_GOOGLE_PLAY",
		5: "MEDIA_SOURCE_DAILIANG",
		6: "MEDIA_SOURCE_OTHERS",
		7: "MEDIA_SOURCE_OEM",
		8: "MEDIA_SOURCE_POSSIBLE_GOOGLE_PLAY",
		9: "MEDIA_SOURCE_NOAH_PUSH",
	}
	MediaSource_value = map[string]int32{
		"MEDIA_SOURCE_DEFAULT":              0,
		"MEDIA_SOURCE_FACEBOOK":             1,
		"MEDIA_SOURCE_ADWORDS":              2,
		"MEDIA_SOURCE_WANGMENG":             3,
		"MEDIA_SOURCE_GOOGLE_PLAY":          4,
		"MEDIA_SOURCE_DAILIANG":             5,
		"MEDIA_SOURCE_OTHERS":               6,
		"MEDIA_SOURCE_OEM":                  7,
		"MEDIA_SOURCE_POSSIBLE_GOOGLE_PLAY": 8,
		"MEDIA_SOURCE_NOAH_PUSH":            9,
	}
)

func (x MediaSource) Enum() *MediaSource {
	p := new(MediaSource)
	*p = x
	return p
}

func (x MediaSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaSource) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[1].Descriptor()
}

func (MediaSource) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[1]
}

func (x MediaSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MediaSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MediaSource(num)
	return nil
}

// Deprecated: Use MediaSource.Descriptor instead.
func (MediaSource) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{1}
}

type ActivationInfo_ActivateType int32

const (
	ActivationInfo_NEW       ActivationInfo_ActivateType = 0
	ActivationInfo_RENEW     ActivationInfo_ActivateType = 1
	ActivationInfo_UPGRADE   ActivationInfo_ActivateType = 2
	ActivationInfo_RECOMMEND ActivationInfo_ActivateType = 3
	ActivationInfo_EFFECTIVE ActivationInfo_ActivateType = 4
)

// Enum value maps for ActivationInfo_ActivateType.
var (
	ActivationInfo_ActivateType_name = map[int32]string{
		0: "NEW",
		1: "RENEW",
		2: "UPGRADE",
		3: "RECOMMEND",
		4: "EFFECTIVE",
	}
	ActivationInfo_ActivateType_value = map[string]int32{
		"NEW":       0,
		"RENEW":     1,
		"UPGRADE":   2,
		"RECOMMEND": 3,
		"EFFECTIVE": 4,
	}
)

func (x ActivationInfo_ActivateType) Enum() *ActivationInfo_ActivateType {
	p := new(ActivationInfo_ActivateType)
	*p = x
	return p
}

func (x ActivationInfo_ActivateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivationInfo_ActivateType) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[2].Descriptor()
}

func (ActivationInfo_ActivateType) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[2]
}

func (x ActivationInfo_ActivateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActivationInfo_ActivateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActivationInfo_ActivateType(num)
	return nil
}

// Deprecated: Use ActivationInfo_ActivateType.Descriptor instead.
func (ActivationInfo_ActivateType) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{0, 0}
}

type ActivationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivateType       *ActivationInfo_ActivateType `protobuf:"varint,1,req,name=activate_type,json=activateType,enum=bbbb.pgd.account.ActivationInfo_ActivateType" json:"activate_type,omitempty"`
	UserId             *uint64                      `protobuf:"varint,2,req,name=user_id,json=userId" json:"user_id,omitempty"` //set to -1 when sent to ACCOUNT, just for compatible
	AppName            *string                      `protobuf:"bytes,3,req,name=app_name,json=appName" json:"app_name,omitempty"`
	AppVersion         *string                      `protobuf:"bytes,4,req,name=app_version,json=appVersion" json:"app_version,omitempty"`
	OsName             *string                      `protobuf:"bytes,5,opt,name=os_name,json=osName" json:"os_name,omitempty"`
	OsVersion          *string                      `protobuf:"bytes,6,opt,name=os_version,json=osVersion" json:"os_version,omitempty"`
	DeviceInfo         *string                      `protobuf:"bytes,7,opt,name=device_info,json=deviceInfo" json:"device_info,omitempty"`
	ChannelCode        *string                      `protobuf:"bytes,8,opt,name=channel_code,json=channelCode" json:"channel_code,omitempty"`
	Imei               *string                      `protobuf:"bytes,9,opt,name=imei" json:"imei,omitempty"`
	Uuid               *string                      `protobuf:"bytes,10,opt,name=uuid" json:"uuid,omitempty"`
	Simid              *string                      `protobuf:"bytes,11,opt,name=simid" json:"simid,omitempty"`
	Locale             *string                      `protobuf:"bytes,12,opt,name=locale" json:"locale,omitempty"`
	Mnc                *string                      `protobuf:"bytes,13,opt,name=mnc" json:"mnc,omitempty"`
	Manufacturer       *string                      `protobuf:"bytes,14,opt,name=manufacturer" json:"manufacturer,omitempty"`
	ApiLevel           *string                      `protobuf:"bytes,15,opt,name=api_level,json=apiLevel" json:"api_level,omitempty"`
	HostAppName        *string                      `protobuf:"bytes,16,opt,name=host_app_name,json=hostAppName" json:"host_app_name,omitempty"`
	HostAppVersion     *string                      `protobuf:"bytes,17,opt,name=host_app_version,json=hostAppVersion" json:"host_app_version,omitempty"`
	Resolution         *string                      `protobuf:"bytes,18,opt,name=resolution" json:"resolution,omitempty"`
	Dpi                *string                      `protobuf:"bytes,19,opt,name=dpi" json:"dpi,omitempty"`
	PysicalSize        *string                      `protobuf:"bytes,20,opt,name=pysical_size,json=pysicalSize" json:"pysical_size,omitempty"`
	RecommendChannel   *string                      `protobuf:"bytes,21,opt,name=recommend_channel,json=recommendChannel" json:"recommend_channel,omitempty"`
	LastActivationCode *string                      `protobuf:"bytes,23,opt,name=last_activation_code,json=lastActivationCode" json:"last_activation_code,omitempty"`
	Identifier         *string                      `protobuf:"bytes,24,opt,name=identifier" json:"identifier,omitempty"`
	SysApp             *bool                        `protobuf:"varint,25,opt,name=sys_app,json=sysApp" json:"sys_app,omitempty"`
	Timestamp          *uint64                      `protobuf:"varint,26,opt,name=timestamp" json:"timestamp,omitempty"`                    //in second
	Idfa               *string                      `protobuf:"bytes,27,opt,name=idfa" json:"idfa,omitempty"`                               // for iOS
	Idfv               *string                      `protobuf:"bytes,28,opt,name=idfv" json:"idfv,omitempty"`                               // for iOS
	AppleToken         *string                      `protobuf:"bytes,29,opt,name=apple_token,json=appleToken" json:"apple_token,omitempty"` //store ios_token
	Release            *string                      `protobuf:"bytes,30,opt,name=release" json:"release,omitempty"`
	AndroidId          *string                      `protobuf:"bytes,31,opt,name=android_id,json=androidId" json:"android_id,omitempty"`
	MacAddress         *string                      `protobuf:"bytes,32,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	DeviceVerified     *string                      `protobuf:"bytes,33,opt,name=device_verified,json=deviceVerified" json:"device_verified,omitempty"`
	PackageName        *string                      `protobuf:"bytes,34,opt,name=package_name,json=packageName" json:"package_name,omitempty"`
	MetaData           *string                      `protobuf:"bytes,35,opt,name=meta_data,json=metaData" json:"meta_data,omitempty"`
	UpgradeTimestamp   *uint64                      `protobuf:"varint,36,opt,name=upgrade_timestamp,json=upgradeTimestamp" json:"upgrade_timestamp,omitempty"`    //in second
	ActivateTimestamp  *uint64                      `protobuf:"varint,37,opt,name=activate_timestamp,json=activateTimestamp" json:"activate_timestamp,omitempty"` //in second
	Gaid               *string                      `protobuf:"bytes,38,opt,name=gaid" json:"gaid,omitempty"`
}

func (x *ActivationInfo) Reset() {
	*x = ActivationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivationInfo) ProtoMessage() {}

func (x *ActivationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivationInfo.ProtoReflect.Descriptor instead.
func (*ActivationInfo) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{0}
}

func (x *ActivationInfo) GetActivateType() ActivationInfo_ActivateType {
	if x != nil && x.ActivateType != nil {
		return *x.ActivateType
	}
	return ActivationInfo_NEW
}

func (x *ActivationInfo) GetUserId() uint64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *ActivationInfo) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *ActivationInfo) GetAppVersion() string {
	if x != nil && x.AppVersion != nil {
		return *x.AppVersion
	}
	return ""
}

func (x *ActivationInfo) GetOsName() string {
	if x != nil && x.OsName != nil {
		return *x.OsName
	}
	return ""
}

func (x *ActivationInfo) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *ActivationInfo) GetDeviceInfo() string {
	if x != nil && x.DeviceInfo != nil {
		return *x.DeviceInfo
	}
	return ""
}

func (x *ActivationInfo) GetChannelCode() string {
	if x != nil && x.ChannelCode != nil {
		return *x.ChannelCode
	}
	return ""
}

func (x *ActivationInfo) GetImei() string {
	if x != nil && x.Imei != nil {
		return *x.Imei
	}
	return ""
}

func (x *ActivationInfo) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *ActivationInfo) GetSimid() string {
	if x != nil && x.Simid != nil {
		return *x.Simid
	}
	return ""
}

func (x *ActivationInfo) GetLocale() string {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return ""
}

func (x *ActivationInfo) GetMnc() string {
	if x != nil && x.Mnc != nil {
		return *x.Mnc
	}
	return ""
}

func (x *ActivationInfo) GetManufacturer() string {
	if x != nil && x.Manufacturer != nil {
		return *x.Manufacturer
	}
	return ""
}

func (x *ActivationInfo) GetApiLevel() string {
	if x != nil && x.ApiLevel != nil {
		return *x.ApiLevel
	}
	return ""
}

func (x *ActivationInfo) GetHostAppName() string {
	if x != nil && x.HostAppName != nil {
		return *x.HostAppName
	}
	return ""
}

func (x *ActivationInfo) GetHostAppVersion() string {
	if x != nil && x.HostAppVersion != nil {
		return *x.HostAppVersion
	}
	return ""
}

func (x *ActivationInfo) GetResolution() string {
	if x != nil && x.Resolution != nil {
		return *x.Resolution
	}
	return ""
}

func (x *ActivationInfo) GetDpi() string {
	if x != nil && x.Dpi != nil {
		return *x.Dpi
	}
	return ""
}

func (x *ActivationInfo) GetPysicalSize() string {
	if x != nil && x.PysicalSize != nil {
		return *x.PysicalSize
	}
	return ""
}

func (x *ActivationInfo) GetRecommendChannel() string {
	if x != nil && x.RecommendChannel != nil {
		return *x.RecommendChannel
	}
	return ""
}

func (x *ActivationInfo) GetLastActivationCode() string {
	if x != nil && x.LastActivationCode != nil {
		return *x.LastActivationCode
	}
	return ""
}

func (x *ActivationInfo) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *ActivationInfo) GetSysApp() bool {
	if x != nil && x.SysApp != nil {
		return *x.SysApp
	}
	return false
}

func (x *ActivationInfo) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *ActivationInfo) GetIdfa() string {
	if x != nil && x.Idfa != nil {
		return *x.Idfa
	}
	return ""
}

func (x *ActivationInfo) GetIdfv() string {
	if x != nil && x.Idfv != nil {
		return *x.Idfv
	}
	return ""
}

func (x *ActivationInfo) GetAppleToken() string {
	if x != nil && x.AppleToken != nil {
		return *x.AppleToken
	}
	return ""
}

func (x *ActivationInfo) GetRelease() string {
	if x != nil && x.Release != nil {
		return *x.Release
	}
	return ""
}

func (x *ActivationInfo) GetAndroidId() string {
	if x != nil && x.AndroidId != nil {
		return *x.AndroidId
	}
	return ""
}

func (x *ActivationInfo) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

func (x *ActivationInfo) GetDeviceVerified() string {
	if x != nil && x.DeviceVerified != nil {
		return *x.DeviceVerified
	}
	return ""
}

func (x *ActivationInfo) GetPackageName() string {
	if x != nil && x.PackageName != nil {
		return *x.PackageName
	}
	return ""
}

func (x *ActivationInfo) GetMetaData() string {
	if x != nil && x.MetaData != nil {
		return *x.MetaData
	}
	return ""
}

func (x *ActivationInfo) GetUpgradeTimestamp() uint64 {
	if x != nil && x.UpgradeTimestamp != nil {
		return *x.UpgradeTimestamp
	}
	return 0
}

func (x *ActivationInfo) GetActivateTimestamp() uint64 {
	if x != nil && x.ActivateTimestamp != nil {
		return *x.ActivateTimestamp
	}
	return 0
}

func (x *ActivationInfo) GetGaid() string {
	if x != nil && x.Gaid != nil {
		return *x.Gaid
	}
	return ""
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         *uint64         `protobuf:"varint,1,req,name=user_id,json=userId" json:"user_id,omitempty"`
	AccountType    *AccountType    `protobuf:"varint,2,req,name=account_type,json=accountType,enum=bbbb.pgd.account.AccountType" json:"account_type,omitempty"`
	Token          *string         `protobuf:"bytes,3,req,name=token" json:"token,omitempty"`
	ExpDate        *uint64         `protobuf:"varint,4,req,name=exp_date,json=expDate" json:"exp_date,omitempty"`
	ActivationCode *string         `protobuf:"bytes,5,opt,name=activation_code,json=activationCode" json:"activation_code,omitempty"`
	ActivationInfo *ActivationInfo `protobuf:"bytes,6,opt,name=activation_info,json=activationInfo" json:"activation_info,omitempty"`
	AccountName    *string         `protobuf:"bytes,7,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	AuthInfo_3P    *string         `protobuf:"bytes,8,opt,name=auth_info_3p,json=authInfo3p" json:"auth_info_3p,omitempty"`
	Auth_3PName    *string         `protobuf:"bytes,9,opt,name=auth_3p_name,json=auth3pName" json:"auth_3p_name,omitempty"`
	Forbidden      *bool           `protobuf:"varint,10,opt,name=forbidden" json:"forbidden,omitempty"`
	AccountRegion  *string         `protobuf:"bytes,11,opt,name=account_region,json=accountRegion" json:"account_region,omitempty"`
	MediaSource    *MediaSource    `protobuf:"varint,12,opt,name=media_source,json=mediaSource,enum=bbbb.pgd.account.MediaSource" json:"media_source,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{1}
}

func (x *Account) GetUserId() uint64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *Account) GetAccountType() AccountType {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return AccountType_TEMP
}

func (x *Account) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *Account) GetExpDate() uint64 {
	if x != nil && x.ExpDate != nil {
		return *x.ExpDate
	}
	return 0
}

func (x *Account) GetActivationCode() string {
	if x != nil && x.ActivationCode != nil {
		return *x.ActivationCode
	}
	return ""
}

func (x *Account) GetActivationInfo() *ActivationInfo {
	if x != nil {
		return x.ActivationInfo
	}
	return nil
}

func (x *Account) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *Account) GetAuthInfo_3P() string {
	if x != nil && x.AuthInfo_3P != nil {
		return *x.AuthInfo_3P
	}
	return ""
}

func (x *Account) GetAuth_3PName() string {
	if x != nil && x.Auth_3PName != nil {
		return *x.Auth_3PName
	}
	return ""
}

func (x *Account) GetForbidden() bool {
	if x != nil && x.Forbidden != nil {
		return *x.Forbidden
	}
	return false
}

func (x *Account) GetAccountRegion() string {
	if x != nil && x.AccountRegion != nil {
		return *x.AccountRegion
	}
	return ""
}

func (x *Account) GetMediaSource() MediaSource {
	if x != nil && x.MediaSource != nil {
		return *x.MediaSource
	}
	return MediaSource_MEDIA_SOURCE_DEFAULT
}

var File_account_proto protoreflect.FileDescriptor

var file_account_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x84, 0x0a, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65,
	0x69, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6d, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x69, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x6e, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x69,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70,
	0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68,
	0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x70, 0x69, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x70, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x5f,
	0x61, 0x70, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x73, 0x41, 0x70,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x64, 0x66, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x64, 0x66, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x66, 0x76, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x64, 0x66, 0x76, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x69, 0x64, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x61, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x0c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4e,
	0x45, 0x57, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x46, 0x46, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x22, 0xfd, 0x03, 0x0a, 0x07, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x42, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70,
	0x67, 0x64, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e,
	0x70, 0x67, 0x64, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x33, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x33, 0x70, 0x12,
	0x20, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x33, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x33, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x70, 0x67, 0x64, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2a, 0xc9, 0x02, 0x0a, 0x0b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45,
	0x4d, 0x50, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x57, 0x49, 0x54,
	0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f,
	0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x41,
	0x55, 0x54, 0x48, 0x32, 0x5f, 0x53, 0x49, 0x4e, 0x41, 0x57, 0x45, 0x49, 0x42, 0x4f, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x51, 0x51, 0x10, 0x06, 0x12,
	0x0d, 0x0a, 0x09, 0x56, 0x4f, 0x49, 0x50, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x10, 0x07, 0x12, 0x08,
	0x0a, 0x04, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x41, 0x55, 0x54,
	0x48, 0x32, 0x5f, 0x58, 0x49, 0x41, 0x4f, 0x4d, 0x49, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x4e, 0x44, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x45, 0x4d, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x0c,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x45, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x0e, 0x12,
	0x10, 0x0a, 0x0c, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10,
	0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x42,
	0x4f, 0x4f, 0x4b, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x54,
	0x57, 0x49, 0x54, 0x54, 0x45, 0x52, 0x10, 0x11, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x4c, 0x4c,
	0x41, 0x53, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x57, 0x45,
	0x49, 0x58, 0x49, 0x4e, 0x10, 0x13, 0x2a, 0xa2, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x57, 0x4f,
	0x52, 0x44, 0x53, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x57, 0x41, 0x4e, 0x47, 0x4d, 0x45, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x04, 0x12, 0x19,
	0x0a, 0x15, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44,
	0x41, 0x49, 0x4c, 0x49, 0x41, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53,
	0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4f, 0x45, 0x4d, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x53, 0x49, 0x42, 0x4c,
	0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x08, 0x12,
	0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4e, 0x4f, 0x41, 0x48, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x09, 0x42, 0x20, 0x5a, 0x1e, 0x77,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6d, 0x67, 0x72, 0x2f, 0x63, 0x6f, 0x6f, 0x74, 0x65,
	0x6b, 0x2f, 0x70, 0x67, 0x64, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
}

var (
	file_account_proto_rawDescOnce sync.Once
	file_account_proto_rawDescData = file_account_proto_rawDesc
)

func file_account_proto_rawDescGZIP() []byte {
	file_account_proto_rawDescOnce.Do(func() {
		file_account_proto_rawDescData = protoimpl.X.CompressGZIP(file_account_proto_rawDescData)
	})
	return file_account_proto_rawDescData
}

var file_account_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_account_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_account_proto_goTypes = []interface{}{
	(AccountType)(0),                 // 0: bbbb.pgd.account.AccountType
	(MediaSource)(0),                 // 1: bbbb.pgd.account.MediaSource
	(ActivationInfo_ActivateType)(0), // 2: bbbb.pgd.account.ActivationInfo.ActivateType
	(*ActivationInfo)(nil),           // 3: bbbb.pgd.account.ActivationInfo
	(*Account)(nil),                  // 4: bbbb.pgd.account.Account
}
var file_account_proto_depIdxs = []int32{
	2, // 0: bbbb.pgd.account.ActivationInfo.activate_type:type_name -> bbbb.pgd.account.ActivationInfo.ActivateType
	0, // 1: bbbb.pgd.account.Account.account_type:type_name -> bbbb.pgd.account.AccountType
	3, // 2: bbbb.pgd.account.Account.activation_info:type_name -> bbbb.pgd.account.ActivationInfo
	1, // 3: bbbb.pgd.account.Account.media_source:type_name -> bbbb.pgd.account.MediaSource
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_account_proto_init() }
func file_account_proto_init() {
	if File_account_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_account_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_account_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_account_proto_goTypes,
		DependencyIndexes: file_account_proto_depIdxs,
		EnumInfos:         file_account_proto_enumTypes,
		MessageInfos:      file_account_proto_msgTypes,
	}.Build()
	File_account_proto = out.File
	file_account_proto_rawDesc = nil
	file_account_proto_goTypes = nil
	file_account_proto_depIdxs = nil
}
