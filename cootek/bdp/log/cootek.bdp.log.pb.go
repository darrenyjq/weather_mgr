// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.3
// source: cootek.bdp.log.proto

package log

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "gitlab.corp.cootek.com/cloud_infra/elete-go/pkg/elete/sdk"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Log_Type int32

const (
	Log_VALID Log_Type = 0
	Log_ERROR Log_Type = 1
)

// Enum value maps for Log_Type.
var (
	Log_Type_name = map[int32]string{
		0: "VALID",
		1: "ERROR",
	}
	Log_Type_value = map[string]int32{
		"VALID": 0,
		"ERROR": 1,
	}
)

func (x Log_Type) Enum() *Log_Type {
	p := new(Log_Type)
	*p = x
	return p
}

func (x Log_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Log_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cootek_bdp_log_proto_enumTypes[0].Descriptor()
}

func (Log_Type) Type() protoreflect.EnumType {
	return &file_cootek_bdp_log_proto_enumTypes[0]
}

func (x Log_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Log_Type.Descriptor instead.
func (Log_Type) EnumDescriptor() ([]byte, []int) {
	return file_cootek_bdp_log_proto_rawDescGZIP(), []int{0, 0}
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             Log_Type `protobuf:"varint,1,opt,name=type,proto3,enum=cootek.bdp.log.Log_Type" json:"type,omitempty"`
	Url              string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	UserId           uint64   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Request          []byte   `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
	AppName          string   `protobuf:"bytes,5,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	AppVersion       string   `protobuf:"bytes,6,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	ChannelCode      string   `protobuf:"bytes,7,opt,name=channel_code,json=channelCode,proto3" json:"channel_code,omitempty"`
	Ip               string   `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	Identifier       string   `protobuf:"bytes,9,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Release          string   `protobuf:"bytes,10,opt,name=release,proto3" json:"release,omitempty"`
	ThisPhone        string   `protobuf:"bytes,11,opt,name=this_phone,json=thisPhone,proto3" json:"this_phone,omitempty"`
	SendTime         string   `protobuf:"bytes,12,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	DeviceInfo       string   `protobuf:"bytes,13,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	Manufacturer     string   `protobuf:"bytes,14,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	RecommendChannel string   `protobuf:"bytes,15,opt,name=recommend_channel,json=recommendChannel,proto3" json:"recommend_channel,omitempty"`
	Locale           string   `protobuf:"bytes,16,opt,name=locale,proto3" json:"locale,omitempty"`
	PackageName      string   `protobuf:"bytes,17,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	MetaData         string   `protobuf:"bytes,18,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	Gaid             string   `protobuf:"bytes,19,opt,name=gaid,proto3" json:"gaid,omitempty"`
	UsageTime        string   `protobuf:"bytes,20,opt,name=usage_time,json=usageTime,proto3" json:"usage_time,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cootek_bdp_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_cootek_bdp_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_cootek_bdp_log_proto_rawDescGZIP(), []int{0}
}

func (x *Log) GetType() Log_Type {
	if x != nil {
		return x.Type
	}
	return Log_VALID
}

func (x *Log) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Log) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Log) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Log) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Log) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *Log) GetChannelCode() string {
	if x != nil {
		return x.ChannelCode
	}
	return ""
}

func (x *Log) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Log) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Log) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *Log) GetThisPhone() string {
	if x != nil {
		return x.ThisPhone
	}
	return ""
}

func (x *Log) GetSendTime() string {
	if x != nil {
		return x.SendTime
	}
	return ""
}

func (x *Log) GetDeviceInfo() string {
	if x != nil {
		return x.DeviceInfo
	}
	return ""
}

func (x *Log) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *Log) GetRecommendChannel() string {
	if x != nil {
		return x.RecommendChannel
	}
	return ""
}

func (x *Log) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Log) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Log) GetMetaData() string {
	if x != nil {
		return x.MetaData
	}
	return ""
}

func (x *Log) GetGaid() string {
	if x != nil {
		return x.Gaid
	}
	return ""
}

func (x *Log) GetUsageTime() string {
	if x != nil {
		return x.UsageTime
	}
	return ""
}

var File_cootek_bdp_log_proto protoreflect.FileDescriptor

var file_cootek_bdp_log_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x62, 0x64, 0x70, 0x2e, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x62,
	0x64, 0x70, 0x2e, 0x6c, 0x6f, 0x67, 0x1a, 0x0b, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x04, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6f, 0x74,
	0x65, 0x6b, 0x2e, 0x62, 0x64, 0x70, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x69, 0x73, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x69,
	0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x61, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x61, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x1c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x32, 0x59,
	0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x4a, 0x0a,
	0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x13, 0x2e, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2e, 0x62, 0x64, 0x70, 0x2e, 0x6c, 0x6f, 0x67,
	0x2e, 0x4c, 0x6f, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0b, 0xc8, 0x90,
	0x20, 0x01, 0xda, 0x90, 0x20, 0x03, 0x4c, 0x4f, 0x47, 0x42, 0x1a, 0x5a, 0x18, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x63, 0x6f, 0x6f, 0x74, 0x65, 0x6b, 0x2f, 0x62, 0x64,
	0x70, 0x2f, 0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cootek_bdp_log_proto_rawDescOnce sync.Once
	file_cootek_bdp_log_proto_rawDescData = file_cootek_bdp_log_proto_rawDesc
)

func file_cootek_bdp_log_proto_rawDescGZIP() []byte {
	file_cootek_bdp_log_proto_rawDescOnce.Do(func() {
		file_cootek_bdp_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_cootek_bdp_log_proto_rawDescData)
	})
	return file_cootek_bdp_log_proto_rawDescData
}

var file_cootek_bdp_log_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cootek_bdp_log_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_cootek_bdp_log_proto_goTypes = []interface{}{
	(Log_Type)(0),       // 0: cootek.bdp.log.Log.Type
	(*Log)(nil),         // 1: cootek.bdp.log.Log
	(*empty.Empty)(nil), // 2: google.protobuf.Empty
}
var file_cootek_bdp_log_proto_depIdxs = []int32{
	0, // 0: cootek.bdp.log.Log.type:type_name -> cootek.bdp.log.Log.Type
	1, // 1: cootek.bdp.log.LogReceiver.SendLogMessage:input_type -> cootek.bdp.log.Log
	2, // 2: cootek.bdp.log.LogReceiver.SendLogMessage:output_type -> google.protobuf.Empty
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_cootek_bdp_log_proto_init() }
func file_cootek_bdp_log_proto_init() {
	if File_cootek_bdp_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cootek_bdp_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cootek_bdp_log_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cootek_bdp_log_proto_goTypes,
		DependencyIndexes: file_cootek_bdp_log_proto_depIdxs,
		EnumInfos:         file_cootek_bdp_log_proto_enumTypes,
		MessageInfos:      file_cootek_bdp_log_proto_msgTypes,
	}.Build()
	File_cootek_bdp_log_proto = out.File
	file_cootek_bdp_log_proto_rawDesc = nil
	file_cootek_bdp_log_proto_goTypes = nil
	file_cootek_bdp_log_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogReceiverClient is the client API for LogReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogReceiverClient interface {
	SendLogMessage(ctx context.Context, in *Log, opts ...grpc.CallOption) (*empty.Empty, error)
}

type logReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewLogReceiverClient(cc grpc.ClientConnInterface) LogReceiverClient {
	return &logReceiverClient{cc}
}

func (c *logReceiverClient) SendLogMessage(ctx context.Context, in *Log, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cootek.bdp.log.LogReceiver/SendLogMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogReceiverServer is the server API for LogReceiver service.
type LogReceiverServer interface {
	SendLogMessage(context.Context, *Log) (*empty.Empty, error)
}

// UnimplementedLogReceiverServer can be embedded to have forward compatible implementations.
type UnimplementedLogReceiverServer struct {
}

func (*UnimplementedLogReceiverServer) SendLogMessage(context.Context, *Log) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLogMessage not implemented")
}

func RegisterLogReceiverServer(s *grpc.Server, srv LogReceiverServer) {
	s.RegisterService(&_LogReceiver_serviceDesc, srv)
}

func _LogReceiver_SendLogMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogReceiverServer).SendLogMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cootek.bdp.log.LogReceiver/SendLogMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogReceiverServer).SendLogMessage(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogReceiver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cootek.bdp.log.LogReceiver",
	HandlerType: (*LogReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendLogMessage",
			Handler:    _LogReceiver_SendLogMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cootek.bdp.log.proto",
}
